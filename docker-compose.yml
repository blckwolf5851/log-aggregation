version: "2"

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka
  kafka:
    image: docker.io/bitnami/kafka:2
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # - KAFKA_BROKER_ID=1

      # - KAFKA_LISTENERS=PLAINTEXT://:9092
      # - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      # - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      # - ALLOW_PLAINTEXT_LISTENER=yes

      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      # - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      # - ALLOW_PLAINTEXT_LISTENER=yes
      # - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
    depends_on:
      - zookeeper
    networks:
      - kafka
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.cors.allow-origin=http://localhost"
      - "http.cors.enabled=true"
      - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
      - "http.cors.allow-credentials=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.cors.allow-origin=http://localhost"
      - "http.cors.enabled=true"
      - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
      - "http.cors.allow-credentials=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.cors.allow-origin=http://localhost"
      - "http.cors.enabled=true"
      - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
      - "http.cors.allow-credentials=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic

  kib01:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kib01
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: '["http://es01:9200","http://es02:9200","http://es03:9200"]'
    # volumes:
    #   - ./docker_config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - elastic
  es_node_api:
    # image: node:14-alpine
    container_name: es_nodejs
    build: ./es_server
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=local
      - ES_HOST=es01
      - NODE_PORT=3000
      - ELASTIC_URL=http://es01:9200
    volumes:
      - .:/usr/src/es_service/quotes
    command: npm run start
    links:
      - es01
      - es02
      - es03
    depends_on:
      - es01
      - es02
      - es03
    networks: 
      - elastic    
  alert_node_api:
    # image: node:14-alpine
    container_name: alert_nodejs
    build: ./alert_service
    ports:
      - 8080:8080
    environment:
      - NODE_ENV=local
      - NODE_PORT=8080
      - ELASTIC_URL=http://es01:9200
    volumes:
      - .:/usr/src/alert_service/quotes
    command: npm run start
    depends_on:
      - kafka
      - zookeeper
    networks:
      - elastic
      - kafka

  notif_node_api:
    # image: node:14-alpine
    container_name: notif_nodejs
    build: ./notification_service
    ports:
      - 8081:8081
    environment:
      - NODE_ENV=local
      - NODE_PORT=8081
    volumes:
      - .:/usr/src/notification_service/quotes
    command: npm run start
    depends_on:
      - kafka
      - zookeeper
    networks:
      - kafka

  receiver_api:
    # image: node:14-alpine
    container_name: log_receiver
    build: ./log_receiver
    ports:
      - 8082:8082
    volumes:
      - .:/usr/src/log_receive_service/quotes
    # command: go run transport.go
    depends_on:
      - kafka
      - zookeeper
    networks:
      - kafka
  notif_sender:
    # image: node:14-alpine
    image: notif_sender
    container_name: notif_sender
    build: ./notif_sender
    ports:
      - 8888:8888
    volumes:
      - .:/usr/src/notif_sender/quotes
    depends_on:
      - kafka
      - zookeeper
    networks:
      - kafka
  kafka_es_bridge:
    container_name: kafka_es_bridge
    build: ./kafka_es_bridge
    environment:
      - NODE_ENV=local
      - ELASTIC_URL=http://es01:9200
    volumes:
      - .:/usr/src/kafka_es_bridge/quotes
    depends_on:
      - kafka
      - zookeeper
      - es01
      - es02
      - es03
    networks:
      - kafka
      - elastic
    
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local


networks:
  elastic:
    driver: bridge
  kafka:
    driver: bridge